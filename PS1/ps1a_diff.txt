--- /Users/ewitmayer/Desktop/6-0002-fall-2016/6-0002-fall-2016/contents/assignments/PS1/ps1a.py
+++ /Users/ewitmayer/Documents/projects/interviews/MIT-60002/PS1/ps1a.py
@@ -7,11 +7,13 @@
 from ps1_partition import get_partitions
 import time
 
-#================================
+# ================================
 # Part A: Transporting Space Cows
-#================================
+# ================================
 
 # Problem 1
+
+
 def load_cows(filename):
     """
     Read the contents of the given file.  Assumes the file contents contain
@@ -24,11 +26,21 @@
     Returns:
     a dictionary of cow name (string), weight (int) pairs
     """
-    # TODO: Your code here
-    pass
+    cow_dict = {}
+    file = open(filename, 'r')
+    for line in file:
+        name, weight = line.split(',')
+        cow_dict[name] = int(weight)
+
+    file.close()
+    print(cow_dict)
+    return cow_dict
+
 
 # Problem 2
-def greedy_cow_transport(cows,limit=10):
+
+
+def greedy_cow_transport(cows, limit=10):
     """
     Uses a greedy heuristic to determine an allocation of cows that attempts to
     minimize the number of spaceship trips needed to transport all the cows. The
@@ -50,11 +62,26 @@
     transported on a particular trip and the overall list containing all the
     trips
     """
-    # TODO: Your code here
-    pass
+    sorted_cows = sorted(cows.items(), key=lambda x: x[1], reverse=True)  # sort list in ascending order
+    final_result = []  # the main list
+    trip = 0
+    while len(sorted_cows) > 0:  # continue until all cows are gone
+        trip_limit = limit  # initial limit
+        final_result.append([])  # initiating inner list.
+        removed_cows = []  # list of cows already used
+        for cow in sorted_cows:
+            if cow[1] <= trip_limit:  # checking weight against limit
+                final_result[trip].append(cow[0])
+                removed_cows.append(sorted_cows.index(cow))
+                trip_limit -= cow[1]  # remove weight of cow from available limit
+        trip += 1
+        for cow_index in sorted(removed_cows, reverse=True):
+            sorted_cows.pop(cow_index)
+    return final_result
 
-# Problem 3
-def brute_force_cow_transport(cows,limit=10):
+
+def brute_force_cow_transport(cows, limit=10):
+    # Problem 3
     """
     Finds the allocation of cows that minimizes the number of spaceship trips
     via brute force.  The brute force algorithm should follow the following method:
@@ -75,11 +102,27 @@
     transported on a particular trip and the overall list containing all the
     trips
     """
-    # TODO: Your code here
-    pass
-        
-# Problem 4
+    cow_names = list(cows.keys())   # list of cow's names
+    cow_copy = cows                 # copy cow dictionary
+    final_result = []                     # save output to list then return
+    for part in get_partitions(cow_names):  # iterating over all partitions
+        over_weight_limit = False   # weight limit is reset for a new partition
+        for sublist in part:
+            weight = 0              # start each partition with empty weight
+            for cow in sublist:
+                weight += cow_copy[cow]     # add weight of the cows
+            if weight > limit:              # if the additional weight breaks the limit, end the loop
+                over_weight_limit = True    # the weights exceed the limit
+                break               # the solution does not work, end loop
+        if over_weight_limit is True:
+            continue
+        elif len(final_result) == 0 or len(final_result) > len(part):
+            final_result = part           # the partition is stored if no solution or if its shorter than stored result
+    return final_result
+
+
 def compare_cow_transport_algorithms():
+    # Problem 4
     """
     Using the data from ps1_cow_data.txt and the specified weight limit, run your
     greedy_cow_transport and brute_force_cow_transport functions here. Use the
@@ -92,5 +135,25 @@
     Returns:
     Does not return anything.
     """
-    # TODO: Your code here
-    pass
+    cow_datafile = 'ps1_cow_data.txt'
+    cows = load_cows(cow_datafile)
+    # testing greedy algorithm first
+    start = time.time()
+    greedy_result = greedy_cow_transport(cows)
+    end = time.time()
+    print("Execution time for greedy algorithm was ", (end - start))
+    print("Problem was solved within ",  len(greedy_result), " trips.")
+    # testing brute force algorithm afterwards
+    start = time.time()
+    brute_result = brute_force_cow_transport(cows)
+    end = time.time()
+    print("Execution time for brute force algorithm was ", (end - start))
+    print("Problem was solved within ", len(brute_result), " trips.")
+
+if __name__ == '__main__':
+    cow_data = load_cows('ps1_cow_data.txt')
+    result = greedy_cow_transport(cow_data)
+    print("-----------\ngreedy cow transport result: \n", result, "\n-----------")
+    result = brute_force_cow_transport(cow_data)
+    print("-----------\nbrute force cow transport result: \n", result, "\n-----------")
+    compare_cow_transport_algorithms()


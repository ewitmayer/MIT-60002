--- /Users/ewitmayer/Documents/projects/interviews/MIT-60002/PS4/ps4.py
+++ /Users/ewitmayer/Desktop/6-0002-fall-2016/6-0002-fall-2016/contents/assignments/PS4/ps4.py
@@ -8,11 +8,10 @@
 import pylab as pl
 import random
 
-random.seed(0)
+
 ##########################
 # End helper code
 ##########################
-
 
 class NoChildException(Exception):
     """
@@ -75,6 +74,10 @@
     pl.show()
 
 
+##########################
+# PROBLEM 1
+##########################
+
 class SimpleBacteria(object):
     """A simple bacteria cell with no antibiotic resistance"""
 
@@ -85,8 +88,7 @@
                 probability
             death_prob (float in [0, 1]): Maximum death probability
         """
-        self.birth_prob = birth_prob
-        self.death_prob = death_prob
+        pass  # TODO
 
     def is_killed(self):
         """
@@ -97,10 +99,7 @@
         Returns:
             bool: True with probability self.death_prob, False otherwise.
         """
-        if random.random() <= self.death_prob:
-            return True
-        else:
-            return False
+        pass  # TODO
 
     def reproduce(self, pop_density):
         """
@@ -128,10 +127,7 @@
         Raises:
             NoChildException if this bacteria cell does not reproduce.
         """
-        if random.random() <= self.birth_prob * (1 - pop_density):
-            return SimpleBacteria(self.birth_prob, self.death_prob)
-        else:
-            raise NoChildException
+        pass  # TODO
 
 
 class Patient(object):
@@ -146,8 +142,7 @@
             max_pop (int): Maximum possible bacteria population size for
                 this patient
         """
-        self.bacteria = bacteria
-        self.max_pop = max_pop
+        pass  # TODO
 
     def get_total_pop(self):
         """
@@ -156,7 +151,7 @@
         Returns:
             int: The total bacteria population
         """
-        return len(self.bacteria)
+        pass  # TODO
 
     def update(self):
         """
@@ -182,17 +177,12 @@
         Returns:
             int: The total bacteria population at the end of the update
         """
-        surviving_bacteria = [b for b in self.bacteria if not b.is_killed()]
-        pop_den = (len(surviving_bacteria) / self.max_pop)
-        offspring_bacteria = []
-        for bact in surviving_bacteria:
-            try:
-                offspring_bacteria.append(bact.reproduce(pop_den))
-            except NoChildException:
-                pass
-        self.bacteria = surviving_bacteria + offspring_bacteria
-        return len(self.bacteria)
-
+        pass  # TODO
+
+
+##########################
+# PROBLEM 2
+##########################
 
 def calc_pop_avg(populations, n):
     """
@@ -201,19 +191,18 @@
     Args:
         populations (list of lists or 2D array): populations[i][j] is the
             number of bacteria in trial i at time step j
-        n: time step
 
     Returns:
         float: The average bacteria population size at time step n
     """
-    print("length populations= ", len(populations), type(populations))
-    print("n=", n, "type = ", type(n))
-
-    length = populations[:][n]
-    return sum(length) / len(length)
-
-
-def simulation_without_antibiotic(num_bacteria, max_pop, birth_prob, death_prob, num_trials):
+    pass  # TODO
+
+
+def simulation_without_antibiotic(num_bacteria,
+                                  max_pop,
+                                  birth_prob,
+                                  death_prob,
+                                  num_trials):
     """
     Run the simulation and plot the graph for problem 2. No antibiotics
     are used, and bacteria do not have any antibiotic resistance.
@@ -221,7 +210,7 @@
     For each of num_trials trials:
         * instantiate a list of SimpleBacteria
         * instantiate a Patient using the list of SimpleBacteria
-        * simulate changes to the bacteria population for 300 time steps,
+        * simulate changes to the bacteria population for 300 timesteps,
           recording the bacteria population after each time step. Note
           that the first time step should contain the starting number of
           bacteria in the patient
@@ -242,24 +231,15 @@
         populations (list of lists or 2D array): populations[i][j] is the
             number of bacteria in trial i at time step j
     """
-    populations = np.empty([num_trials, 300])
-    for i in range(num_trials):
-        bacteria = [SimpleBacteria(birth_prob, death_prob)] * num_bacteria
-        patient = Patient(bacteria, max_pop)
-        for t in range(300):
-            populations[i][t] = patient.get_total_pop()
-            patient.update()
-
-    # plot results
-    avg_bact = np.sum(populations[0], 0)
-    make_one_curve_plot(np.arange(300), avg_bact, 't', 'Bacteria Count', 'Simple Bacteria Without Antibiotics')
-    return populations
+    pass  # TODO
 
 
 # When you are ready to run the simulation, uncomment the next line
-# TODO
 # populations = simulation_without_antibiotic(100, 1000, 0.1, 0.025, 50)
 
+##########################
+# PROBLEM 3
+##########################
 
 def calc_pop_std(populations, t):
     """
@@ -282,15 +262,7 @@
         float: the standard deviation of populations across different trials at
              a specific time step
     """
-    print("length populations= ", len(populations), type(populations))
-    print("t=", t, "type = ", type(t))
-    u = calc_pop_avg(populations, t)
-    rho2 = 0  # not actual rho^2 yet
-    for x in populations[:][t]:
-        rho2 += (x - u) ** 2
-    rho2 /= len(populations[:][t])  # okay, now it's rho^2
-
-    return rho2 ** 0.5  # return rho
+    pass  # TODO
 
 
 def calc_95_ci(populations, t):
@@ -314,10 +286,12 @@
 
         I.e., you should return a tuple containing (mean, width)
     """
-    print("length populations= ", len(populations), type(populations))
-    print("t=", t, "type = ", type(t))
-    return (calc_pop_avg(populations, t), 1.96 * calc_pop_std(populations, t))
-
+    pass  # TODO
+
+
+##########################
+# PROBLEM 4
+##########################
 
 class ResistantBacteria(SimpleBacteria):
     """A bacteria cell that can have antibiotic resistance."""
@@ -332,13 +306,11 @@
                 bacteria cell. This is the maximum probability of the
                 offspring acquiring antibiotic resistance
         """
-        super().__init__(birth_prob, death_prob)
-        self.resistant = resistant
-        self.mut_prob = mut_prob
+        pass  # TODO
 
     def get_resistant(self):
         """Returns whether the bacteria has antibiotic resistance"""
-        return self.resistant
+        pass  # TODO
 
     def is_killed(self):
         """Stochastically determines whether this bacteria cell is killed in
@@ -352,17 +324,7 @@
             bool: True if the bacteria dies with the appropriate probability
                 and False otherwise.
         """
-        r = random.random()
-        if self.get_resistant():
-            if r <= self.death_prob:
-                return True
-            else:
-                return False
-        else:
-            if r <= (self.death_prob / 4):
-                return True
-            else:
-                return False
+        pass  # TODO
 
     def reproduce(self, pop_density):
         """
@@ -393,17 +355,7 @@
             as this bacteria. Otherwise, raises a NoChildException if this
             bacteria cell does not reproduce.
         """
-        if random.random() <= (self.birth_prob * (1 - pop_density)):
-            if self.get_resistant():
-                resistant = True
-            else:
-                if random.random() <= (self.mut_prob * (1 - pop_density)):
-                    resistant = True
-                else:
-                    resistant = False
-            return ResistantBacteria(self.birth_prob, self.death_prob, resistant, self.mut_prob)
-        else:
-            raise NoChildException
+        pass  # TODO
 
 
 class TreatedPatient(Patient):
@@ -426,15 +378,14 @@
         Don't forget to call Patient's __init__ method at the start of this
         method.
         """
-        super().__init__(bacteria, max_pop)
-        self.on_antibiotic = False
+        pass  # TODO
 
     def set_on_antibiotic(self):
         """
         Administer an antibiotic to this patient. The antibiotic acts on the
         bacteria population for all subsequent time steps.
         """
-        self.on_antibiotic = True
+        pass  # TODO
 
     def get_resist_pop(self):
         """
@@ -443,7 +394,7 @@
         Returns:
             int: the number of bacteria with antibiotic resistance
         """
-        return len([b for b in self.bacteria if b.get_resistant()])
+        pass  # TODO
 
     def update(self):
         """
@@ -470,38 +421,28 @@
         Returns:
             int: The total bacteria population at the end of the update
         """
-        surviving_bacteria = []
-        for b in self.bacteria:
-            if not b.is_killed():
-                surviving_bacteria.append(b)
-        if self.on_antibiotic:
-            for b in surviving_bacteria:
-                if not b.get_resistant():
-                    surviving_bacteria.remove(b)
-        pop_den = (len(surviving_bacteria) / self.max_pop)
-        offspring_bacteria = []
-        for b in surviving_bacteria:
-            try:
-                offspring_bacteria.append(b.reproduce(pop_den))
-            except NoChildException:
-                pass
-        self.bacteria = surviving_bacteria + offspring_bacteria
-        return len(self.bacteria)
+        pass  # TODO
 
 
 ##########################
 # PROBLEM 5
 ##########################
 
-def simulation_with_antibiotic(num_bacteria, max_pop, birth_prob, death_prob, resistant, mut_prob, num_trials):
+def simulation_with_antibiotic(num_bacteria,
+                               max_pop,
+                               birth_prob,
+                               death_prob,
+                               resistant,
+                               mut_prob,
+                               num_trials):
     """
     Runs simulations and plots graphs for problem 4.
 
     For each of num_trials trials:
         * instantiate a list of ResistantBacteria
         * instantiate a patient
-        * run a simulation for 150 time steps, add the antibiotic, and run the
-          simulation for an additional 250 time steps, recording the total
+        * run a simulation for 150 timesteps, add the antibiotic, and run the
+          simulation for an additional 250 timesteps, recording the total
           bacteria population and the resistance bacteria population after
           each time step
 
@@ -531,46 +472,23 @@
             resistant_pop[i][j] is the number of resistant bacteria for
             trial i at time step j
     """
-    populations = np.empty([400, num_trials])
-    resistant_pop = np.empty([400, num_trials])
-    for i in range(num_trials):
-        bacteria = [ResistantBacteria(birth_prob, death_prob, resistant,
-                                      mut_prob
-                                      )] * num_bacteria
-        patient = TreatedPatient(bacteria, max_pop)
-        for t in range(150):
-            populations[t][i] = patient.get_total_pop()
-            resistant_pop[t][i] = patient.get_resist_pop()
-            patient.update()
-        patient.set_on_antibiotic()
-        for t in range(150, 400):
-            populations[t][i] = patient.get_total_pop()
-            resistant_pop[t][i] = patient.get_resist_pop()
-            patient.update()
-
-    # plot results
-    avg_bact = np.sum(populations, 1)
-    avg_resist_bact = np.sum(resistant_pop, 1)
-    make_two_curve_plot(np.arange(400), avg_bact, avg_resist_bact,
-                        'Total', 'Resistant', 'Time step', 'Average Population', 'With an  Antibiotic')
-
-    return populations, resistant_pop
-
-
-def main():
-    total_pop, resistant_pop = simulation_with_antibiotic(num_bacteria=100, max_pop=1000, birth_prob=0.3,
-                                                          death_prob=0.2, resistant=False, mut_prob=0.8,
-                                                          num_trials=50)
-    print(calc_95_ci(total_pop, 299))
-    print(calc_95_ci(resistant_pop, 299))
-
-    total_pop, resistant_pop = simulation_with_antibiotic(num_bacteria=100, max_pop=1000, birth_prob=0.17,
-                                                          death_prob=0.2, resistant=False, mut_prob=0.8,
-                                                          num_trials=50)
-
-    print(calc_95_ci(total_pop, 299))
-    print(calc_95_ci(resistant_pop, 299))
-
-
-if __name__ == '__main__':
-    main()
+    pass  # TODO
+
+
+# When you are ready to run the simulations, uncomment the next lines one
+# at a time
+total_pop, resistant_pop = simulation_with_antibiotic(num_bacteria=100,
+                                                      max_pop=1000,
+                                                      birth_prob=0.3,
+                                                      death_prob=0.2,
+                                                      resistant=False,
+                                                      mut_prob=0.8,
+                                                      num_trials=50)
+
+total_pop, resistant_pop = simulation_with_antibiotic(num_bacteria=100,
+                                                      max_pop=1000,
+                                                      birth_prob=0.17,
+                                                      death_prob=0.2,
+                                                      resistant=False,
+                                                      mut_prob=0.8,
+                                                      num_trials=50)

